//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The MultiClusterPlatform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	url "net/url"

	gateway "github.com/multi-cluster-platform/mcp/pkg/apis/gateway"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Cluster)(nil), (*gateway.Cluster)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Cluster_To_gateway_Cluster(a.(*Cluster), b.(*gateway.Cluster), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*gateway.Cluster)(nil), (*Cluster)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_gateway_Cluster_To_v1_Cluster(a.(*gateway.Cluster), b.(*Cluster), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Shadow)(nil), (*gateway.Shadow)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Shadow_To_gateway_Shadow(a.(*Shadow), b.(*gateway.Shadow), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*gateway.Shadow)(nil), (*Shadow)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_gateway_Shadow_To_v1_Shadow(a.(*gateway.Shadow), b.(*Shadow), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*url.Values)(nil), (*Cluster)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_url_Values_To_v1_Cluster(a.(*url.Values), b.(*Cluster), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*url.Values)(nil), (*Shadow)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_url_Values_To_v1_Shadow(a.(*url.Values), b.(*Shadow), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_Cluster_To_gateway_Cluster(in *Cluster, out *gateway.Cluster, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Path = in.Path
	return nil
}

// Convert_v1_Cluster_To_gateway_Cluster is an autogenerated conversion function.
func Convert_v1_Cluster_To_gateway_Cluster(in *Cluster, out *gateway.Cluster, s conversion.Scope) error {
	return autoConvert_v1_Cluster_To_gateway_Cluster(in, out, s)
}

func autoConvert_gateway_Cluster_To_v1_Cluster(in *gateway.Cluster, out *Cluster, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Path = in.Path
	return nil
}

// Convert_gateway_Cluster_To_v1_Cluster is an autogenerated conversion function.
func Convert_gateway_Cluster_To_v1_Cluster(in *gateway.Cluster, out *Cluster, s conversion.Scope) error {
	return autoConvert_gateway_Cluster_To_v1_Cluster(in, out, s)
}

func autoConvert_url_Values_To_v1_Cluster(in *url.Values, out *Cluster, s conversion.Scope) error {
	// WARNING: Field TypeMeta does not have json tag, skipping.

	if values, ok := map[string][]string(*in)["metadata"]; ok && len(values) > 0 {
		// FIXME: out.ObjectMeta is of not yet supported type and requires manual conversion
	} else {
		out.ObjectMeta = metav1.ObjectMeta{}
	}
	if values, ok := map[string][]string(*in)["path"]; ok && len(values) > 0 {
		if err := runtime.Convert_Slice_string_To_string(&values, &out.Path, s); err != nil {
			return err
		}
	} else {
		out.Path = ""
	}
	return nil
}

// Convert_url_Values_To_v1_Cluster is an autogenerated conversion function.
func Convert_url_Values_To_v1_Cluster(in *url.Values, out *Cluster, s conversion.Scope) error {
	return autoConvert_url_Values_To_v1_Cluster(in, out, s)
}

func autoConvert_v1_Shadow_To_gateway_Shadow(in *Shadow, out *gateway.Shadow, s conversion.Scope) error {
	out.Path = in.Path
	return nil
}

// Convert_v1_Shadow_To_gateway_Shadow is an autogenerated conversion function.
func Convert_v1_Shadow_To_gateway_Shadow(in *Shadow, out *gateway.Shadow, s conversion.Scope) error {
	return autoConvert_v1_Shadow_To_gateway_Shadow(in, out, s)
}

func autoConvert_gateway_Shadow_To_v1_Shadow(in *gateway.Shadow, out *Shadow, s conversion.Scope) error {
	out.Path = in.Path
	return nil
}

// Convert_gateway_Shadow_To_v1_Shadow is an autogenerated conversion function.
func Convert_gateway_Shadow_To_v1_Shadow(in *gateway.Shadow, out *Shadow, s conversion.Scope) error {
	return autoConvert_gateway_Shadow_To_v1_Shadow(in, out, s)
}

func autoConvert_url_Values_To_v1_Shadow(in *url.Values, out *Shadow, s conversion.Scope) error {
	// WARNING: Field TypeMeta does not have json tag, skipping.

	if values, ok := map[string][]string(*in)["path"]; ok && len(values) > 0 {
		if err := runtime.Convert_Slice_string_To_string(&values, &out.Path, s); err != nil {
			return err
		}
	} else {
		out.Path = ""
	}
	return nil
}

// Convert_url_Values_To_v1_Shadow is an autogenerated conversion function.
func Convert_url_Values_To_v1_Shadow(in *url.Values, out *Shadow, s conversion.Scope) error {
	return autoConvert_url_Values_To_v1_Shadow(in, out, s)
}
